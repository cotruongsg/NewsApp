{"version":3,"file":"index.modern.js","sources":["../src/useInterval.ts","../src/utils.ts","../src/index.tsx"],"sourcesContent":["import { useEffect, useRef } from 'react'\n\n/** keep typescript happy */\nconst noop = () => {}\n\nexport function useInterval(\n    callback: () => void,\n    delay: number | null | false,\n    immediate?: boolean\n) {\n    const savedCallback = useRef(noop)\n\n    // Remember the latest callback.\n    useEffect(() => {\n        savedCallback.current = callback\n    })\n\n    // Execute callback if immediate is set.\n    useEffect(() => {\n        if (!immediate) return\n        if (delay === null || delay === false) return\n        savedCallback.current()\n    }, [immediate])\n\n    // Set up the interval.\n    useEffect(() => {\n        if (delay === null || delay === false) return undefined\n        const tick = () => savedCallback.current()\n        const id = setInterval(tick, delay)\n        return () => clearInterval(id)\n    }, [delay])\n}\n\nexport default useInterval\n","export function randomValue(min: number, max: number): number {\n    return Math.random() * (max - min + 1) + min\n}\n\nexport function randomInt(min: number, max: number): number {\n    return Math.floor(randomValue(min, max))\n}\n","import * as React from 'react'\nimport {\n    CSSProperties,\n    useEffect,\n    useState,\n    forwardRef,\n    useImperativeHandle,\n    useRef,\n} from 'react'\nimport { useInterval } from './useInterval'\nimport { randomInt, randomValue } from './utils'\n\ntype IProps = {\n    progress?: number\n    color?: string\n    shadow?: boolean\n    background?: string\n    height?: number\n    onLoaderFinished?: () => void\n    className?: string\n    containerClassName?: string\n    loaderSpeed?: number\n    transitionTime?: number\n    waitingTime?: number\n    style?: CSSProperties\n    containerStyle?: CSSProperties\n    shadowStyle?: CSSProperties\n}\n\nexport type LoadingBarRef = {\n    continuousStart: (startingValue?: number, refreshRate?: number) => void\n    staticStart: (startingValue?: number) => void\n    complete: () => void\n}\n\nconst LoadingBar = forwardRef<LoadingBarRef, IProps>(\n    (\n        {\n            progress,\n            height = 2,\n            className = '',\n            color = 'red',\n            background = 'transparent',\n            onLoaderFinished,\n            transitionTime = 300,\n            loaderSpeed = 500,\n            waitingTime = 1000,\n            shadow = true,\n            containerStyle = {},\n            style = {},\n            shadowStyle: shadowStyleProp = {},\n            containerClassName = '',\n        },\n        ref\n    ) => {\n        const isMounted = useRef(false)\n        const [localProgress, localProgressSet] = useState<number>(0)\n        const [pressedContinuous, setPressedContinuous] = useState<{\n            active: boolean\n            startingValue: number\n            refreshRate: number\n        }>({ active: false, startingValue: 20, refreshRate: 1000 })\n        const [usingProps, setUsingProps] = useState(false)\n\n        const [pressedStaticStart, setStaticStartPressed] = useState<{\n            active: boolean\n            value: number\n        }>({ active: false, value: 20 })\n\n        const initialLoaderStyle: CSSProperties = {\n            height: '100%',\n            background: color,\n            transition: `all ${loaderSpeed}ms ease`,\n            width: '0%',\n        }\n\n        const loaderContainerStyle: CSSProperties = {\n            position: 'fixed',\n            top: 0,\n            left: 0,\n            height,\n            background,\n            zIndex: 99999999999,\n            width: 100 + '%',\n        }\n\n        const initialShadowStyles: CSSProperties = {\n            boxShadow: `0 0 10px ${color}, 0 0 10px ${color}`,\n            width: '5%',\n            opacity: 1,\n            position: 'absolute',\n            height: '100%',\n            transition: `all ${loaderSpeed}ms ease`,\n            transform: 'rotate(3deg) translate(0px, -4px)',\n            left: '-10rem',\n        }\n\n        const [loaderStyle, loaderStyleSet] =\n            useState<CSSProperties>(initialLoaderStyle)\n        const [shadowStyle, shadowStyleSet] =\n            useState<CSSProperties>(initialShadowStyles)\n\n        useEffect(() => {\n            isMounted.current = true\n            return () => {\n                isMounted.current = false\n            }\n        }, [])\n\n        useImperativeHandle(ref, () => ({\n            continuousStart(startingValue: number, refreshRate: number = 1000) {\n                if (pressedStaticStart.active) return\n                if (usingProps) {\n                    console.warn(\n                        \"react-top-loading-bar: You can't use both controlling by props and ref methods to control the bar!\"\n                    )\n                    return\n                }\n\n                const val = startingValue || randomInt(10, 20)\n                setPressedContinuous({\n                    active: true,\n                    refreshRate,\n                    startingValue,\n                })\n                localProgressSet(val)\n                checkIfFull(val)\n            },\n            staticStart(startingValue?: number) {\n                if (pressedContinuous.active) return\n                if (usingProps) {\n                    console.warn(\n                        \"react-top-loading-bar: You can't use both controlling by props and ref methods to control the bar!\"\n                    )\n                    return\n                }\n\n                const val = startingValue || randomInt(30, 50)\n                setStaticStartPressed({\n                    active: true,\n                    value: val,\n                })\n                localProgressSet(val)\n                checkIfFull(val)\n            },\n            complete() {\n                if (usingProps) {\n                    console.warn(\n                        \"react-top-loading-bar: You can't use both controlling by props and ref methods to control the bar!\"\n                    )\n                    return\n                }\n                localProgressSet(100)\n                checkIfFull(100)\n            },\n        }))\n\n        useEffect(() => {\n            loaderStyleSet({\n                ...loaderStyle,\n                background: color,\n            })\n\n            shadowStyleSet({\n                ...shadowStyle,\n                boxShadow: `0 0 10px ${color}, 0 0 5px ${color}`,\n            })\n        }, [color])\n\n        useEffect(() => {\n            if (ref) {\n                if (ref && progress !== undefined) {\n                    console.warn(\n                        'react-top-loading-bar: You can\\'t use both controlling by props and ref methods to control the bar! Please use only props or only ref methods! Ref methods will override props if \"ref\" property is available.'\n                    )\n                    return\n                }\n                checkIfFull(localProgress)\n                setUsingProps(false)\n            } else {\n                if (progress) checkIfFull(progress)\n\n                setUsingProps(true)\n            }\n        }, [progress])\n\n        const checkIfFull = (_progress: number) => {\n            if (_progress >= 100) {\n                // now it should wait a little bit\n                loaderStyleSet({\n                    ...loaderStyle,\n                    width: '100%',\n                })\n                if (shadow) {\n                    shadowStyleSet({\n                        ...shadowStyle,\n                        left: _progress - 10 + '%',\n                    })\n                }\n\n                setTimeout(() => {\n                    if (!isMounted.current) {\n                        return\n                    }\n                    // now it can fade out\n                    loaderStyleSet({\n                        ...loaderStyle,\n                        opacity: 0,\n                        width: '100%',\n                        transition: `all ${transitionTime}ms ease-out`,\n                        color: color,\n                    })\n\n                    setTimeout(() => {\n                        if (!isMounted.current) {\n                            return\n                        }\n                        // here we wait for it to fade\n                        if (pressedContinuous.active) {\n                            // if we have continous loader just ending, we kill it and reset it\n                            setPressedContinuous({\n                                ...pressedContinuous,\n                                active: false,\n                            })\n                            localProgressSet(0)\n                            checkIfFull(0)\n                        }\n\n                        if (pressedStaticStart.active) {\n                            setStaticStartPressed({\n                                ...pressedStaticStart,\n                                active: false,\n                            })\n                            localProgressSet(0)\n                            checkIfFull(0)\n                        }\n\n                        if (onLoaderFinished) onLoaderFinished()\n                        localProgressSet(0)\n                        checkIfFull(0)\n                    }, transitionTime)\n                }, waitingTime)\n            } else {\n                loaderStyleSet((_loaderStyle) => {\n                    return {\n                        ..._loaderStyle,\n                        width: _progress + '%',\n                        opacity: 1,\n                        transition:\n                            _progress > 0 ? `all ${loaderSpeed}ms ease` : '',\n                    }\n                })\n\n                if (shadow) {\n                    shadowStyleSet({\n                        ...shadowStyle,\n                        left: _progress - 5.5 + '%',\n                        transition:\n                            _progress > 0 ? `all ${loaderSpeed}ms ease` : '',\n                    })\n                }\n            }\n        }\n\n        useInterval(\n            () => {\n                const random = randomValue(\n                    Math.min(10, (100 - localProgress) / 5),\n                    Math.min(20, (100 - localProgress) / 3)\n                )\n\n                if (localProgress + random < 100) {\n                    localProgressSet(localProgress + random)\n                    checkIfFull(localProgress + random)\n                }\n            },\n            pressedContinuous.active ? pressedContinuous.refreshRate : null\n        )\n\n        return (\n            <div\n                className={containerClassName}\n                style={{ ...loaderContainerStyle, ...containerStyle }}\n            >\n                <div className={className} style={{ ...loaderStyle, ...style }}>\n                    {shadow ? (\n                        <div style={{ ...shadowStyle, ...shadowStyleProp }} />\n                    ) : null}\n                </div>\n            </div>\n        )\n    }\n)\n\nexport { IProps }\n\nexport default LoadingBar\n"],"names":["noop","randomValue","min","max","Math","random","randomInt","floor","LoadingBar","forwardRef","ref","progress","height","className","color","background","onLoaderFinished","transitionTime","loaderSpeed","waitingTime","shadow","containerStyle","style","shadowStyle","shadowStyleProp","containerClassName","isMounted","useRef","useState","localProgress","localProgressSet","active","startingValue","refreshRate","pressedContinuous","setPressedContinuous","usingProps","setUsingProps","value","pressedStaticStart","setStaticStartPressed","loaderContainerStyle","position","top","left","zIndex","width","initialShadowStyles","boxShadow","opacity","transition","transform","loaderStyle","loaderStyleSet","shadowStyleSet","useEffect","current","useImperativeHandle","continuousStart","console","warn","val","checkIfFull","staticStart","complete","undefined","callback","delay","savedCallback","_progress","setTimeout","_loaderStyle","immediate","id","setInterval","clearInterval","React"],"mappings":"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"}