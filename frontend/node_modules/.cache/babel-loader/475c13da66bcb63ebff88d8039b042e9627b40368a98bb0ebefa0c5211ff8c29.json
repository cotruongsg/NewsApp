{"ast":null,"code":"var _jsxFileName = \"C:\\\\Springboard\\\\Springboard\\\\Springboard\\\\Exercises\\\\React\\\\news_searching\\\\frontend\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\n//import logo from './logo.svg';\nimport { BrowserRouter } from 'react-router-dom';\nimport './App.css';\nimport JoblyApi from './api/api';\nimport AppRoutes from \"./routes-main/AppRoutes\";\nimport useLocalStorage from \"./hooks/useLocalStorage\";\nimport LoadingSpinner from './support/LoadingSpinner';\nimport Navigation from './routes-main/Navigation';\nimport UserContext from \"./auth/UserContext\";\nimport \"./polyfills\";\nimport jwt from \"jsonwebtoken\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const TOKEN_STORAGE_ID = \"jobly-token\";\nfunction App() {\n  _s();\n  const [currentUser, setCurrentUser] = useState(null);\n  const [token, setToken] = useLocalStorage(TOKEN_STORAGE_ID);\n  const [infoLoaded, setInfoLoaded] = useState(false);\n  const [applicationIds, setApplicationIds] = useState(new Set([]));\n  console.debug(\"App\", \"infoLoaded=\", infoLoaded, \"currentUser=\", currentUser, \"token=\", token);\n\n  // need a useEffect will run whenever the app get a new token\n  useEffect(function loadUserInfor() {\n    console.debug(\"App useEffect loadUserInfo\", \"token=\", token);\n    async function getUser() {\n      if (token) {\n        try {\n          // jwt.decode() will return a payload object which contain username.\n          let {\n            username\n          } = jwt.decode(token);\n          //update new token in the Api class so it can use it to call the API.\n          JoblyApi.token = token;\n          let currentUser = await JoblyApi.getCurrentUser(username);\n          setCurrentUser(currentUser);\n          console.debug(currentUser);\n          // applications is a column of user table in database of back-end\n          setApplicationIds(new Set(currentUser.applications));\n        } catch (err) {\n          console.error(\"App loadUserInfo: problem loading\", err);\n          setCurrentUser(null);\n        }\n      }\n      setInfoLoaded(true);\n    }\n    // we need to set infoLoaded to fasle before we fetch the data \n    // It will show on the screen : Loading.... when it is waiting for the data from the request.\n    setInfoLoaded(false);\n    getUser();\n  }, [token]);\n\n  // login and get token\n  async function login(loginData) {\n    try {\n      let token = await JoblyApi.login(loginData);\n      setToken(token);\n      return {\n        success: true\n      };\n    } catch (errors) {\n      console.error(\"login failed\", errors);\n      return {\n        success: false,\n        errors\n      };\n    }\n  }\n\n  //signup and  get token\n  async function signup(signupData) {\n    try {\n      let token = await JoblyApi.signup({\n        ...signupData\n      });\n      setToken(token);\n      return {\n        success: true\n      };\n    } catch (errors) {\n      console.error(\"signup failed\", errors);\n      return {\n        success: false,\n        errors\n      };\n    }\n  }\n\n  // signout and value of token and currentUser will be null\n  async function logout() {\n    setCurrentUser(null);\n    setToken(null);\n  }\n\n  // Check the user did apply for this job\n  function hasAppliedToJob(id) {\n    // Return boolean, if user did apply this job, it return true, otherwise return false\n    return applicationIds.has(id);\n  }\n  async function applyToJob(id) {\n    if (hasAppliedToJob(id)) return;\n    JoblyApi.applyJob(currentUser.username, id);\n    setApplicationIds(new Set([...applicationIds, id]));\n  }\n  if (!infoLoaded) return /*#__PURE__*/_jsxDEV(LoadingSpinner, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 103,\n    columnNumber: 27\n  }, this);\n  return /*#__PURE__*/_jsxDEV(BrowserRouter, {\n    children: /*#__PURE__*/_jsxDEV(UserContext.Provider, {\n      value: {\n        currentUser,\n        setCurrentUser,\n        hasAppliedToJob,\n        applyToJob\n      },\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"App\",\n        children: [/*#__PURE__*/_jsxDEV(Navigation, {\n          logout: logout\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(AppRoutes, {\n          login: login,\n          signup: signup\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 106,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"/i4vD3QPuea32RgeHm3BeFRsfmY=\", false, function () {\n  return [useLocalStorage];\n});\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","BrowserRouter","JoblyApi","AppRoutes","useLocalStorage","LoadingSpinner","Navigation","UserContext","jwt","jsxDEV","_jsxDEV","TOKEN_STORAGE_ID","App","_s","currentUser","setCurrentUser","token","setToken","infoLoaded","setInfoLoaded","applicationIds","setApplicationIds","Set","console","debug","loadUserInfor","getUser","username","decode","getCurrentUser","applications","err","error","login","loginData","success","errors","signup","signupData","logout","hasAppliedToJob","id","has","applyToJob","applyJob","fileName","_jsxFileName","lineNumber","columnNumber","children","Provider","value","className","_c","$RefreshReg$"],"sources":["C:/Springboard/Springboard/Springboard/Exercises/React/news_searching/frontend/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\n//import logo from './logo.svg';\r\nimport {BrowserRouter} from 'react-router-dom';\r\nimport './App.css';\r\nimport JoblyApi from './api/api';\r\nimport AppRoutes from \"./routes-main/AppRoutes\";\r\nimport useLocalStorage from \"./hooks/useLocalStorage\";\r\nimport LoadingSpinner from './support/LoadingSpinner';\r\nimport Navigation from './routes-main/Navigation';\r\nimport UserContext from \"./auth/UserContext\";\r\nimport \"./polyfills\";\r\nimport jwt from \"jsonwebtoken\";\r\n\r\nexport const TOKEN_STORAGE_ID = \"jobly-token\";\r\n\r\nfunction App() {\r\n  const [currentUser, setCurrentUser] = useState(null);\r\n  const [token, setToken] = useLocalStorage(TOKEN_STORAGE_ID);\r\n  const [infoLoaded, setInfoLoaded] = useState(false);\r\n  const [applicationIds, setApplicationIds] = useState(new Set([]));\r\n  console.debug(\r\n      \"App\",\r\n      \"infoLoaded=\",\r\n      infoLoaded,\r\n      \"currentUser=\",\r\n      currentUser,\r\n      \"token=\",\r\n      token\r\n    );\r\n\r\n  // need a useEffect will run whenever the app get a new token\r\n  useEffect(function loadUserInfor(){\r\n    console.debug(\"App useEffect loadUserInfo\", \"token=\", token);\r\n\r\n    async function getUser(){\r\n      if (token){\r\n        try {\r\n          // jwt.decode() will return a payload object which contain username.\r\n          let { username } = jwt.decode(token);\r\n          //update new token in the Api class so it can use it to call the API.\r\n          JoblyApi.token = token;\r\n          let currentUser = await JoblyApi.getCurrentUser(username);\r\n          setCurrentUser(currentUser);\r\n          console.debug(currentUser);\r\n          // applications is a column of user table in database of back-end\r\n          setApplicationIds(new Set(currentUser.applications));\r\n        }catch(err){\r\n           console.error(\"App loadUserInfo: problem loading\", err);\r\n           setCurrentUser(null);\r\n        }\r\n      }\r\n      setInfoLoaded(true);\r\n    } \r\n    // we need to set infoLoaded to fasle before we fetch the data \r\n    // It will show on the screen : Loading.... when it is waiting for the data from the request.\r\n    setInfoLoaded(false);\r\n    getUser();\r\n\r\n  }, [token]);\r\n \r\n  // login and get token\r\n  async function login(loginData){\r\n    try{\r\n      let token = await JoblyApi.login(loginData);\r\n      setToken(token);\r\n      return {success :true}\r\n    }catch(errors){\r\n      console.error(\"login failed\", errors);\r\n      return { success: false, errors };\r\n    }\r\n  }\r\n\r\n  //signup and  get token\r\n  async function signup(signupData){\r\n    try{\r\n      let token = await JoblyApi.signup({...signupData});\r\n      setToken(token);\r\n      return {success :true};\r\n    }catch(errors){\r\n      console.error(\"signup failed\", errors);\r\n      return { success: false, errors };\r\n    }\r\n  }\r\n\r\n  // signout and value of token and currentUser will be null\r\n  async function logout(){\r\n    setCurrentUser(null);\r\n    setToken(null)\r\n  }\r\n\r\n  // Check the user did apply for this job\r\n  function hasAppliedToJob(id){\r\n    // Return boolean, if user did apply this job, it return true, otherwise return false\r\n    return applicationIds.has(id)\r\n  }\r\n\r\n  async function applyToJob(id) {\r\n    if (hasAppliedToJob(id)) return;\r\n    JoblyApi.applyJob(currentUser.username, id);\r\n    setApplicationIds(new Set([...applicationIds, id]));\r\n  }\r\n\r\n  if (!infoLoaded) return <LoadingSpinner />;\r\n\r\n  return (\r\n    <BrowserRouter>\r\n      <UserContext.Provider value={{ currentUser, setCurrentUser, hasAppliedToJob, applyToJob}}>\r\n        <div className=\"App\">\r\n          <Navigation logout={logout} />\r\n          <AppRoutes login={login} signup={signup} />\r\n        </div>\r\n      </UserContext.Provider>\r\n    </BrowserRouter>\r\n  );\r\n}\r\n\r\nexport default App;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}