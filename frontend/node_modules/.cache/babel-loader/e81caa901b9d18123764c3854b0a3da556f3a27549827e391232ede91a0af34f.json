{"ast":null,"code":"var _jsxFileName = \"C:\\\\Springboard\\\\Springboard\\\\Springboard\\\\Exercises\\\\React\\\\React-Jobly\\\\frontend\\\\src\\\\job\\\\JobList.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport JobCardList from \"./JobCardList\";\nimport JoblyApi from \"../api/api\";\nimport LoadingSpinner from \"../support/LoadingSpinner\";\nimport SearchForm from \"../form/SearchForm\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction JobList() {\n  _s();\n  console.debug(\"JobList\");\n  const [jobs, setJobs] = useState(null);\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  async function getJobs(searchTerm) {\n    return searchTerm ? JoblyApi.getJobs(searchTerm) : JoblyApi.getAllJobs();\n  }\n  useEffect(() => {\n    async function fetchData() {\n      const jobs = await getJobs(searchTerm);\n      setJobs(jobs);\n      console.debug(jobs);\n    }\n    fetchData();\n  }, [searchTerm]);\n  function search(term) {\n    console.log(\"Set Search Term: \", term);\n    setSearchTerm(term);\n  }\n  if (!jobs) return /*#__PURE__*/_jsxDEV(LoadingSpinner, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 21\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(SearchForm, {\n      search: search\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this), jobs.length ? /*#__PURE__*/_jsxDEV(JobCardList, {\n      jobs: jobs\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Sorry! There are no jobs available\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 5\n  }, this);\n}\n_s(JobList, \"kqcK7n9wfL7YlDdi54UdnFaGVnM=\");\n_c = JobList;\nexport default JobList;\n//for movielist, to filter all movies info whIch are in movielists\n// data is an array of arrays\n// each array contains 2 element is id and name of movie.\nvar _c;\n$RefreshReg$(_c, \"JobList\");","map":{"version":3,"names":["React","useState","useEffect","JobCardList","JoblyApi","LoadingSpinner","SearchForm","jsxDEV","_jsxDEV","JobList","_s","console","debug","jobs","setJobs","searchTerm","setSearchTerm","getJobs","getAllJobs","fetchData","search","term","log","fileName","_jsxFileName","lineNumber","columnNumber","children","length","_c","$RefreshReg$"],"sources":["C:/Springboard/Springboard/Springboard/Exercises/React/React-Jobly/frontend/src/job/JobList.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport JobCardList from \"./JobCardList\";\r\nimport JoblyApi from \"../api/api\";\r\nimport LoadingSpinner from \"../support/LoadingSpinner\";\r\nimport SearchForm from \"../form/SearchForm\";\r\n\r\nfunction JobList() {\r\n  console.debug(\"JobList\");\r\n  const [jobs, setJobs] = useState(null);\r\n  const [searchTerm, setSearchTerm] = useState(\"\");\r\n\r\n  async function getJobs(searchTerm) {\r\n    return searchTerm ? JoblyApi.getJobs(searchTerm) : JoblyApi.getAllJobs();\r\n  }\r\n\r\n  useEffect(() => {\r\n    async function fetchData() {\r\n      const jobs = await getJobs(searchTerm);\r\n      setJobs(jobs);\r\n      console.debug(jobs);\r\n    }\r\n\r\n    fetchData();\r\n  }, [searchTerm]);\r\n\r\n  function search(term) {\r\n    console.log(\"Set Search Term: \", term);\r\n    setSearchTerm(term);\r\n  }\r\n\r\n  if (!jobs) return <LoadingSpinner />;\r\n\r\n  return (\r\n    <div>\r\n      <SearchForm search={search} />\r\n      {jobs.length ? (\r\n        <JobCardList jobs={jobs} />\r\n      ) : (\r\n        <p>Sorry! There are no jobs available</p>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default JobList;\r\n  //for movielist, to filter all movies info whIch are in movielists\r\n  // data is an array of arrays\r\n  // each array contains 2 element is id and name of movie."],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,WAAW,MAAM,eAAe;AACvC,OAAOC,QAAQ,MAAM,YAAY;AACjC,OAAOC,cAAc,MAAM,2BAA2B;AACtD,OAAOC,UAAU,MAAM,oBAAoB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE5C,SAASC,OAAOA,CAAA,EAAG;EAAAC,EAAA;EACjBC,OAAO,CAACC,KAAK,CAAC,SAAS,CAAC;EACxB,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGb,QAAQ,CAAC,IAAI,CAAC;EACtC,MAAM,CAACc,UAAU,EAAEC,aAAa,CAAC,GAAGf,QAAQ,CAAC,EAAE,CAAC;EAEhD,eAAegB,OAAOA,CAACF,UAAU,EAAE;IACjC,OAAOA,UAAU,GAAGX,QAAQ,CAACa,OAAO,CAACF,UAAU,CAAC,GAAGX,QAAQ,CAACc,UAAU,CAAC,CAAC;EAC1E;EAEAhB,SAAS,CAAC,MAAM;IACd,eAAeiB,SAASA,CAAA,EAAG;MACzB,MAAMN,IAAI,GAAG,MAAMI,OAAO,CAACF,UAAU,CAAC;MACtCD,OAAO,CAACD,IAAI,CAAC;MACbF,OAAO,CAACC,KAAK,CAACC,IAAI,CAAC;IACrB;IAEAM,SAAS,CAAC,CAAC;EACb,CAAC,EAAE,CAACJ,UAAU,CAAC,CAAC;EAEhB,SAASK,MAAMA,CAACC,IAAI,EAAE;IACpBV,OAAO,CAACW,GAAG,CAAC,mBAAmB,EAAED,IAAI,CAAC;IACtCL,aAAa,CAACK,IAAI,CAAC;EACrB;EAEA,IAAI,CAACR,IAAI,EAAE,oBAAOL,OAAA,CAACH,cAAc;IAAAkB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC;EAEpC,oBACElB,OAAA;IAAAmB,QAAA,gBACEnB,OAAA,CAACF,UAAU;MAACc,MAAM,EAAEA;IAAO;MAAAG,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,EAC7Bb,IAAI,CAACe,MAAM,gBACVpB,OAAA,CAACL,WAAW;MAACU,IAAI,EAAEA;IAAK;MAAAU,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,gBAE3BlB,OAAA;MAAAmB,QAAA,EAAG;IAAkC;MAAAJ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CACzC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV;AAAChB,EAAA,CApCQD,OAAO;AAAAoB,EAAA,GAAPpB,OAAO;AAsChB,eAAeA,OAAO;AACpB;AACA;AACA;AAAA,IAAAoB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}