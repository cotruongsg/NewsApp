{"ast":null,"code":"var _jsxFileName = \"C:\\\\Springboard\\\\Springboard\\\\Springboard\\\\Exercises\\\\React\\\\news_searching\\\\frontend\\\\src\\\\routes-main\\\\ArticlesContainer.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport 'whatwg-fetch'; // Use fetch for API calls\nimport Masonry from 'react-masonry-css';\nimport { Row } from 'reactstrap';\nimport { Article } from './Article';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction ArticlesContainer(props) {\n  _s();\n  const [loading, setLoading] = useState(true);\n  const [articles, setArticles] = useState([]);\n  useEffect(() => {\n    // Get the incoming route\n    const route = props.pathName;\n\n    // Get articles for the first time being mounted\n    const apiRoute = getApiRoute(route);\n    getArticles(apiRoute);\n  }, [props.pathName]);\n  const getApiRoute = route => {\n    // Default route should make API call to api/top, otherwise use route name\n    // for API route (e.g. \"espn\" becomes \"/api/espn\")\n    return route === '/' ? '/api/top' : `/api/${route}`;\n  };\n  const getArticles = route => {\n    // Necessary to set loading state for method reuse\n    setLoading(true);\n\n    // Requests API from backend (server.js)\n    fetch(route).then(response => response.json()).then(json => {\n      const articles = json.articles; // Array of article objects/hashes\n      setArticles(articles);\n      setLoading(false);\n      // console.log('parsed json', articles);\n    }).catch(ex => {\n      console.log('parsing failed', ex);\n    });\n  };\n\n  // Configure breakpoints for Masonry grid of columns\n  const breakpointColumnsObj = {\n    default: 3,\n    992: 2,\n    576: 1\n  };\n  if (loading) return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"Loading...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 23\n  }, this);\n  return /*#__PURE__*/_jsxDEV(Row, {\n    children: /*#__PURE__*/_jsxDEV(Masonry, {\n      breakpointCols: breakpointColumnsObj,\n      className: \"article-masonry-grid\",\n      columnClassName: \"article-masonry-grid_column\",\n      children: articles.map((article, i) => /*#__PURE__*/_jsxDEV(Article, {\n        url: article.url,\n        urlToImage: article.urlToImage,\n        title: article.title,\n        description: article.description\n      }, `article-${i}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 5\n  }, this);\n}\n_s(ArticlesContainer, \"pW9fOATqkucejzDrGvrHqYU3QHI=\");\n_c = ArticlesContainer;\nArticlesContainer.propTypes = {\n  pathName: PropTypes.string.isRequired\n};\nexport default ArticlesContainer;\nvar _c;\n$RefreshReg$(_c, \"ArticlesContainer\");","map":{"version":3,"names":["React","useState","useEffect","PropTypes","Masonry","Row","Article","jsxDEV","_jsxDEV","ArticlesContainer","props","_s","loading","setLoading","articles","setArticles","route","pathName","apiRoute","getApiRoute","getArticles","fetch","then","response","json","catch","ex","console","log","breakpointColumnsObj","default","children","fileName","_jsxFileName","lineNumber","columnNumber","breakpointCols","className","columnClassName","map","article","i","url","urlToImage","title","description","_c","propTypes","string","isRequired","$RefreshReg$"],"sources":["C:/Springboard/Springboard/Springboard/Exercises/React/news_searching/frontend/src/routes-main/ArticlesContainer.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport 'whatwg-fetch'; // Use fetch for API calls\r\nimport Masonry from 'react-masonry-css';\r\nimport { Row } from 'reactstrap';\r\nimport { Article } from './Article';\r\n\r\nfunction ArticlesContainer(props) {\r\n  const [loading, setLoading] = useState(true);\r\n  const [articles, setArticles] = useState([]);\r\n\r\n  useEffect(() => {\r\n    // Get the incoming route\r\n    const route = props.pathName;\r\n\r\n    // Get articles for the first time being mounted\r\n    const apiRoute = getApiRoute(route);\r\n    getArticles(apiRoute);\r\n  }, [props.pathName]);\r\n\r\n  const getApiRoute = (route) => {\r\n    // Default route should make API call to api/top, otherwise use route name\r\n    // for API route (e.g. \"espn\" becomes \"/api/espn\")\r\n    return route === '/' ? '/api/top' : `/api/${route}`;\r\n  };\r\n\r\n  const getArticles = (route) => {\r\n    // Necessary to set loading state for method reuse\r\n    setLoading(true);\r\n\r\n    // Requests API from backend (server.js)\r\n    fetch(route)\r\n      .then((response) => response.json())\r\n      .then((json) => {\r\n        const articles = json.articles; // Array of article objects/hashes\r\n        setArticles(articles);\r\n        setLoading(false);\r\n        // console.log('parsed json', articles);\r\n      })\r\n      .catch((ex) => {\r\n        console.log('parsing failed', ex);\r\n      });\r\n  };\r\n\r\n  // Configure breakpoints for Masonry grid of columns\r\n  const breakpointColumnsObj = {\r\n    default: 3,\r\n    992: 2,\r\n    576: 1,\r\n  };\r\n\r\n  if (loading) return <p>Loading...</p>;\r\n\r\n  return (\r\n    <Row>\r\n      <Masonry\r\n        breakpointCols={breakpointColumnsObj}\r\n        className=\"article-masonry-grid\"\r\n        columnClassName=\"article-masonry-grid_column\"\r\n      >\r\n        {articles.map((article, i) => (\r\n          <Article\r\n            key={`article-${i}`}\r\n            url={article.url}\r\n            urlToImage={article.urlToImage}\r\n            title={article.title}\r\n            description={article.description}\r\n          />\r\n        ))}\r\n      </Masonry>\r\n    </Row>\r\n  );\r\n}\r\n\r\nArticlesContainer.propTypes = {\r\n  pathName: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default ArticlesContainer;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,SAAS,MAAM,YAAY;AAClC,OAAO,cAAc,CAAC,CAAC;AACvB,OAAOC,OAAO,MAAM,mBAAmB;AACvC,SAASC,GAAG,QAAQ,YAAY;AAChC,SAASC,OAAO,QAAQ,WAAW;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEpC,SAASC,iBAAiBA,CAACC,KAAK,EAAE;EAAAC,EAAA;EAChC,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGZ,QAAQ,CAAC,IAAI,CAAC;EAC5C,MAAM,CAACa,QAAQ,EAAEC,WAAW,CAAC,GAAGd,QAAQ,CAAC,EAAE,CAAC;EAE5CC,SAAS,CAAC,MAAM;IACd;IACA,MAAMc,KAAK,GAAGN,KAAK,CAACO,QAAQ;;IAE5B;IACA,MAAMC,QAAQ,GAAGC,WAAW,CAACH,KAAK,CAAC;IACnCI,WAAW,CAACF,QAAQ,CAAC;EACvB,CAAC,EAAE,CAACR,KAAK,CAACO,QAAQ,CAAC,CAAC;EAEpB,MAAME,WAAW,GAAIH,KAAK,IAAK;IAC7B;IACA;IACA,OAAOA,KAAK,KAAK,GAAG,GAAG,UAAU,GAAI,QAAOA,KAAM,EAAC;EACrD,CAAC;EAED,MAAMI,WAAW,GAAIJ,KAAK,IAAK;IAC7B;IACAH,UAAU,CAAC,IAAI,CAAC;;IAEhB;IACAQ,KAAK,CAACL,KAAK,CAAC,CACTM,IAAI,CAAEC,QAAQ,IAAKA,QAAQ,CAACC,IAAI,CAAC,CAAC,CAAC,CACnCF,IAAI,CAAEE,IAAI,IAAK;MACd,MAAMV,QAAQ,GAAGU,IAAI,CAACV,QAAQ,CAAC,CAAC;MAChCC,WAAW,CAACD,QAAQ,CAAC;MACrBD,UAAU,CAAC,KAAK,CAAC;MACjB;IACF,CAAC,CAAC,CACDY,KAAK,CAAEC,EAAE,IAAK;MACbC,OAAO,CAACC,GAAG,CAAC,gBAAgB,EAAEF,EAAE,CAAC;IACnC,CAAC,CAAC;EACN,CAAC;;EAED;EACA,MAAMG,oBAAoB,GAAG;IAC3BC,OAAO,EAAE,CAAC;IACV,GAAG,EAAE,CAAC;IACN,GAAG,EAAE;EACP,CAAC;EAED,IAAIlB,OAAO,EAAE,oBAAOJ,OAAA;IAAAuB,QAAA,EAAG;EAAU;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAG,CAAC;EAErC,oBACE3B,OAAA,CAACH,GAAG;IAAA0B,QAAA,eACFvB,OAAA,CAACJ,OAAO;MACNgC,cAAc,EAAEP,oBAAqB;MACrCQ,SAAS,EAAC,sBAAsB;MAChCC,eAAe,EAAC,6BAA6B;MAAAP,QAAA,EAE5CjB,QAAQ,CAACyB,GAAG,CAAC,CAACC,OAAO,EAAEC,CAAC,kBACvBjC,OAAA,CAACF,OAAO;QAENoC,GAAG,EAAEF,OAAO,CAACE,GAAI;QACjBC,UAAU,EAAEH,OAAO,CAACG,UAAW;QAC/BC,KAAK,EAAEJ,OAAO,CAACI,KAAM;QACrBC,WAAW,EAAEL,OAAO,CAACK;MAAY,GAJ3B,WAAUJ,CAAE,EAAC;QAAAT,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAKpB,CACF;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACK;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACP,CAAC;AAEV;AAACxB,EAAA,CAjEQF,iBAAiB;AAAAqC,EAAA,GAAjBrC,iBAAiB;AAmE1BA,iBAAiB,CAACsC,SAAS,GAAG;EAC5B9B,QAAQ,EAAEd,SAAS,CAAC6C,MAAM,CAACC;AAC7B,CAAC;AAED,eAAexC,iBAAiB;AAAC,IAAAqC,EAAA;AAAAI,YAAA,CAAAJ,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}