{"ast":null,"code":"import axios from \"axios\";\nconst BASE_URL = process.env.REACT_APP_BASE_URL || \"http://localhost:3001\";\n\n/** API Class.\r\n *\r\n * Static class tying together methods used to get/send to to the API.\r\n * There shouldn't be any frontend-specific stuff here, and there shouldn't\r\n * be any API-aware stuff elsewhere in the frontend.\r\n *\r\n */\n\nclass JoblyApi {\n  // the token for interactive with the API will be stored here.\n\n  static async request(endpoint, data = {}, method = \"get\") {\n    console.debug(\"API Call:\", endpoint, data, method);\n\n    //there are multiple ways to pass an authorization token, this is how you pass it in the header.\n    //this has been provided to show you another way to pass the token. you are only expected to read this code for this project.\n    const url = `${BASE_URL}/${endpoint}`;\n    const headers = {\n      Authorization: `Bearer ${JoblyApi.token}`\n    };\n    const params = method === \"get\" ? data : {};\n    try {\n      return (await axios({\n        url,\n        method,\n        data,\n        params,\n        headers\n      })).data;\n    } catch (err) {\n      console.error(\"API Error:\", err.response);\n      let message = err.response.data.error.message;\n      throw Array.isArray(message) ? message : [message];\n    }\n  }\n\n  // Individual API routes\n\n  /** Get the current user. */\n\n  static async getCurrentUser(username) {\n    let res = await this.request(`users/${username}`);\n    return res.user;\n  }\n\n  //get company by its name, or other filter: minEmployees, maxEmployees\n  static async getCompanies(name) {\n    let res = await this.request(\"companies\", {\n      name\n    });\n    return res.companies;\n  }\n\n  /** Get details on a company by handle. */\n\n  static async getCompany(handle) {\n    let res = await this.request(`companies/${handle}`);\n    return res.company;\n  }\n\n  // get all job\n  static async getAllJobs() {\n    let res = await this.request(\"jobs\");\n    return res.jobs;\n  }\n\n  // get job by minSalary, or hasEquity, or title\n  static async getJobs(title) {\n    let res = await this.request(\"jobs\", {\n      title\n    });\n    return res.jobs;\n  }\n\n  // User will apply a job\n  static async applyJob(username, id) {\n    await this.request(`users/${username}/jobs/${id}`, {}, \"post\");\n  }\n  //User login\n  static async login(data) {\n    let res = await this.request(\"auth/token\", data, \"post\");\n    return res.token;\n  }\n  // Register new user\n  static async signup(data) {\n    let res = await this.request(\"auth/register\", data, \"post\");\n    return res.token;\n  }\n  //update the user profile\n  static async updateProfile(username, data) {\n    let res = await this.request(`users/${username}`, data, \"patch\");\n    return res.user;\n  }\n}\n\n// for now, put token (\"testuser\" / \"password\" on class)\nJoblyApi.token = \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZ\" + \"SI6InRlc3R1c2VyIiwiaXNBZG1pbiI6ZmFsc2UsImlhdCI6MTU5ODE1OTI1OX0.\" + \"FtrMwBQwe6Ue-glIFgz_Nf8XxRT2YecFCiSpYL0fCXc\";\nexport default JoblyApi;","map":{"version":3,"names":["axios","BASE_URL","process","env","REACT_APP_BASE_URL","JoblyApi","request","endpoint","data","method","console","debug","url","headers","Authorization","token","params","err","error","response","message","Array","isArray","getCurrentUser","username","res","user","getCompanies","name","companies","getCompany","handle","company","getAllJobs","jobs","getJobs","title","applyJob","id","login","signup","updateProfile"],"sources":["C:/Springboard/Springboard/Springboard/Exercises/React/React-Jobly/frontend/src/api/api.js"],"sourcesContent":["import axios from \"axios\";\r\n\r\nconst BASE_URL = process.env.REACT_APP_BASE_URL || \"http://localhost:3001\";\r\n\r\n/** API Class.\r\n *\r\n * Static class tying together methods used to get/send to to the API.\r\n * There shouldn't be any frontend-specific stuff here, and there shouldn't\r\n * be any API-aware stuff elsewhere in the frontend.\r\n *\r\n */\r\n\r\nclass JoblyApi {\r\n  // the token for interactive with the API will be stored here.\r\n  static token;\r\n\r\n  static async request(endpoint, data = {}, method = \"get\") {\r\n    console.debug(\"API Call:\", endpoint, data, method);\r\n\r\n    //there are multiple ways to pass an authorization token, this is how you pass it in the header.\r\n    //this has been provided to show you another way to pass the token. you are only expected to read this code for this project.\r\n    const url = `${BASE_URL}/${endpoint}`;\r\n    const headers = { Authorization: `Bearer ${JoblyApi.token}` };\r\n    const params = method === \"get\" ? data : {};\r\n\r\n    try {\r\n      return (await axios({ url, method, data, params, headers })).data;\r\n    } catch (err) {\r\n      console.error(\"API Error:\", err.response);\r\n      let message = err.response.data.error.message;\r\n      throw Array.isArray(message) ? message : [message];\r\n    }\r\n  }\r\n\r\n  // Individual API routes\r\n\r\n  /** Get the current user. */\r\n\r\n  static async getCurrentUser(username) {\r\n    let res = await this.request(`users/${username}`);\r\n    return res.user;\r\n  }\r\n\r\n  //get company by its name, or other filter: minEmployees, maxEmployees\r\n  static async getCompanies(name) {\r\n    let res = await this.request(\"companies\", { name });\r\n    return res.companies;\r\n  }\r\n\r\n  /** Get details on a company by handle. */\r\n\r\n  static async getCompany(handle) {\r\n    let res = await this.request(`companies/${handle}`);\r\n    return res.company;\r\n  }\r\n\r\n  // get all job\r\n  static async getAllJobs() {\r\n    let res = await this.request(\"jobs\");\r\n    return res.jobs;\r\n  }\r\n\r\n  // get job by minSalary, or hasEquity, or title\r\n  static async getJobs(title) {\r\n    let res = await this.request(\"jobs\", { title });\r\n    return res.jobs;\r\n  }\r\n\r\n  // User will apply a job\r\n  static async applyJob(username, id) {\r\n    await this.request(`users/${username}/jobs/${id}`, {}, \"post\");\r\n  }\r\n  //User login\r\n  static async login(data) {\r\n    let res = await this.request(\"auth/token\", data, \"post\");\r\n    return res.token;\r\n  }\r\n  // Register new user\r\n  static async signup(data) {\r\n    let res = await this.request(\"auth/register\", data, \"post\");\r\n    return res.token;\r\n  }\r\n  //update the user profile\r\n  static async updateProfile(username, data) {\r\n    let res = await this.request(`users/${username}`, data, \"patch\");\r\n    return res.user;\r\n  }\r\n}\r\n\r\n// for now, put token (\"testuser\" / \"password\" on class)\r\nJoblyApi.token =\r\n  \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZ\" +\r\n  \"SI6InRlc3R1c2VyIiwiaXNBZG1pbiI6ZmFsc2UsImlhdCI6MTU5ODE1OTI1OX0.\" +\r\n  \"FtrMwBQwe6Ue-glIFgz_Nf8XxRT2YecFCiSpYL0fCXc\";\r\n\r\nexport default JoblyApi;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}