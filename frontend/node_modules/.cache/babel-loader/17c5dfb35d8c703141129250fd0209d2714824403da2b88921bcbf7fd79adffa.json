{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from \"react\";\n\n/** Custom hook for keeping state data synced with localStorage.\r\n *\r\n * This creates `item` as state and look in localStorage for current value\r\n * (if not found, defaults to `firstValue`)\r\n *\r\n * When `item` changes, effect re-runs:\r\n * - if new state is null, removes from localStorage\r\n * - else, updates localStorage\r\n *\r\n * To the component, this just acts like state that is also synced to/from\r\n * localStorage::\r\n *\r\n *   const [myThing, setMyThing] = useLocalStorage(\"myThing\")\r\n */\n\nfunction useLocalStorage(key) {\n  _s();\n  let firstValue = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n  const initialValue = localStorage.getItem(key) || firstValue;\n  const [item, setItem] = useState(initialValue);\n  useEffect(function setKeyInLocalStorage() {\n    console.debug(\"hooks useLocalStorage useEffect\", \"item=\", item);\n    if (item === null) {\n      localStorage.removeItem(key);\n    } else {\n      localStorage.setItem(key, item);\n    }\n  }, [key, item]);\n  return [item, setItem];\n}\n_s(useLocalStorage, \"Ffy6E8fMITg3LBvoOT7j3kGXQqo=\");\nexport default useLocalStorage;","map":{"version":3,"names":["useState","useEffect","useLocalStorage","key","_s","firstValue","arguments","length","undefined","initialValue","localStorage","getItem","item","setItem","setKeyInLocalStorage","console","debug","removeItem"],"sources":["C:/Springboard/Springboard/Springboard/Exercises/React/news_searching/frontend/src/hooks/useLocalStorage.js"],"sourcesContent":["import { useState, useEffect } from \"react\";\r\n\r\n/** Custom hook for keeping state data synced with localStorage.\r\n *\r\n * This creates `item` as state and look in localStorage for current value\r\n * (if not found, defaults to `firstValue`)\r\n *\r\n * When `item` changes, effect re-runs:\r\n * - if new state is null, removes from localStorage\r\n * - else, updates localStorage\r\n *\r\n * To the component, this just acts like state that is also synced to/from\r\n * localStorage::\r\n *\r\n *   const [myThing, setMyThing] = useLocalStorage(\"myThing\")\r\n */\r\n\r\nfunction useLocalStorage(key, firstValue = null) {\r\n  const initialValue = localStorage.getItem(key) || firstValue;\r\n\r\n  const [item, setItem] = useState(initialValue);\r\n\r\n  useEffect(\r\n    function setKeyInLocalStorage() {\r\n      console.debug(\"hooks useLocalStorage useEffect\", \"item=\", item);\r\n\r\n      if (item === null) {\r\n        localStorage.removeItem(key);\r\n      } else {\r\n        localStorage.setItem(key, item);\r\n      }\r\n    },\r\n    [key, item]\r\n  );\r\n\r\n  return [item, setItem];\r\n}\r\n\r\nexport default useLocalStorage;\r\n"],"mappings":";AAAA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;;AAE3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASC,eAAeA,CAACC,GAAG,EAAqB;EAAAC,EAAA;EAAA,IAAnBC,UAAU,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,IAAI;EAC7C,MAAMG,YAAY,GAAGC,YAAY,CAACC,OAAO,CAACR,GAAG,CAAC,IAAIE,UAAU;EAE5D,MAAM,CAACO,IAAI,EAAEC,OAAO,CAAC,GAAGb,QAAQ,CAACS,YAAY,CAAC;EAE9CR,SAAS,CACP,SAASa,oBAAoBA,CAAA,EAAG;IAC9BC,OAAO,CAACC,KAAK,CAAC,iCAAiC,EAAE,OAAO,EAAEJ,IAAI,CAAC;IAE/D,IAAIA,IAAI,KAAK,IAAI,EAAE;MACjBF,YAAY,CAACO,UAAU,CAACd,GAAG,CAAC;IAC9B,CAAC,MAAM;MACLO,YAAY,CAACG,OAAO,CAACV,GAAG,EAAES,IAAI,CAAC;IACjC;EACF,CAAC,EACD,CAACT,GAAG,EAAES,IAAI,CACZ,CAAC;EAED,OAAO,CAACA,IAAI,EAAEC,OAAO,CAAC;AACxB;AAACT,EAAA,CAnBQF,eAAe;AAqBxB,eAAeA,eAAe"},"metadata":{},"sourceType":"module","externalDependencies":[]}